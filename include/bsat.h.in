/*============================================================================*
 * libbsat: timeout management utilities for projects that use libev.
 * Copyright (c) 2021 Andrew T. Canaday
 *
 * This file is part of libbsat, which is licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *----------------------------------------------------------------------------*/

#ifndef BSAT_H
#define BSAT_H

#include "ev.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/** # API Ref: libbsat */

/*--------------------------------------------------
 * Library info:
 *--------------------------------------------------*/

/** ## Library Info */

/** Release version as a 32-bit unsigned integer */
#define BSAT_VERSION @BSAT_VERSION@


#define BSAT_MAJOR (BSAT_VERSION >> 24 & 0xff)
#define BSAT_MINOR (BSAT_VERSION >> 16 & 0xff)
#define BSAT_PATCH (BSAT_VERSION >>  8 & 0xff)

/** Release version as a string. */
extern const char* BSAT_VERSION_STR;


/*--------------------------------------------------
 * Types:
 *--------------------------------------------------*/

/** ## Types */

/** ### bsat_toq_t
 *
 * Timeout queue — a set of items sharing a common timeout DELTA.
 *
 * > **NOTE**: this structure has a `void* data` member which you can set
 * > _after_ `bsat_toq_init` in order to associate program data with a given
 * > timeout queue in a way that is accessible during the callback invocation.
 */
typedef struct bsat_toq bsat_toq_t;


/** ### bsat_timeout_t
 *
 * An individual item in a timeout set
 *
 * > **NOTE**: this structure has a `void* data` member which you can set
 * > _after_ `bsat_timeout_init` in order to associate program data with a given
 * > timeout in a way that is accessible during the callback invocation.
 */
typedef struct bsat_timeout bsat_timeout_t;


/** ### bsat_callback_t
 *
 * Callback type used when an individual item in a set times out.
 *
 * > **NOTE**: once the callback has been invoked for a given item, it _will not
 * > be invoked again, unless you call `bsat_timeout_reset` to reintroduce the
 * > item into the timeout set._
 */
typedef void (*bsat_callback_t)(bsat_toq_t* toq, bsat_timeout_t* item);


struct bsat_toq {
    bsat_callback_t cb;
    bsat_timeout_t* head;
    bsat_timeout_t* tail;
    void* data;

    EV_P;
    ev_timer timer;
    ev_tstamp after;
};


struct bsat_timeout {
    bsat_timeout_t* prev;
    bsat_timeout_t* next;
    ev_tstamp tstamp;
    void* data;
};


/*--------------------------------------------------
 * BSAT Timeout Queue Functions:
 *--------------------------------------------------*/
/** ## Timeout Queue Functions */

/** ### bsat_toq_init
 *
 * Initialize a timeout queue.
 *
 * - `loop` (if EV_MULTIPLICITY is set) libev loop
 * - `cb` the callback invoked when the timeout fires
 * - `after` the timeout period, in seconds (ev-style)
 * - `data` optional user data to associate with this timeout queue
 *
 * Returns a new `bsat_toq_t*` on success; `NULL` (with `errno` set) on failure.
 */
void bsat_toq_init(EV_P_ bsat_toq_t* toq, bsat_callback_t cb, ev_tstamp after);


/** ### bsat_toq_stop
 *
 * Stop a timeout queue. This _literally just stops the `ev_io_watcher`.
 *
 * > **NOTE**: Active items remain in the queue after stop _with their
 * > **original deadlines** intact!_
 *
 * If you want to:
 *  - _Clear_ all of the pending timeouts: `bsat_toq_clear`.
 *  - _Invoke the toq callback_ for all of the **pending** timeouts:
 *    `bsat_toq_invoke_pending`.
 *  - _Reset all_ of the timeouts: ...this is a potential TODO. Lmk.
 */
void bsat_toq_stop(bsat_toq_t* toq);


/** ### bsat_toq_clear
 *
 * Remove all pending timeouts from the queue.
 *
 * This is equivalent to calling `bsat_timeout_stop` on each item presently in
 * the queue.
 */
void bsat_toq_clear(bsat_toq_t* toq);


/** ### bsat_toq_invoke_pending
 *
 * Invoke the registered callback for every item in the queue, as if it had
 * timed out _just now_. Afterwards, the queue will be in the same state as if
 * you had invoked `bsat_toq_clear`.
 */
void bsat_toq_invoke_pending(bsat_toq_t* toq);


/*--------------------------------------------------
 * BSAT Timeout Functions:
 *--------------------------------------------------*/
/** ## Timeout Functions */


/** ### bsat_timeout_init
 *
 * Initialize a timeout item.
 */
void bsat_timeout_init(bsat_timeout_t* item);


/** ### bsat_timeout_start
 *
 * Start a timeout item. Absent any calls to `bsat_timeout_reset` in the
 * interim, this means that the `bsat_callback_t` registered with `toq`
 * will be invoked for this timeout in `ev_now()` + `after` seconds.
 *
 * (See `bsat_toq_init` for details)
 */
void bsat_timeout_start(bsat_toq_t* toq, bsat_timeout_t* item);


/** ### bsat_timeout_reset
 *
 * Reset a timeout — i.e. it didn't time out, so restart the counter as if it
 * had been started right `ev_now()`.
 */
void bsat_timeout_reset(bsat_toq_t* toq, bsat_timeout_t* item);


/** ### bsat_timeout_stop
 *
 * Cancel a timeout item — i.e. unschedule it for execution.
 *
 * > **NOTE**: after invoking `bsat_timeout_stop`, the given `toq` no longer
 * > keeps track of the timeout item until it's reset.
 */
void bsat_timeout_stop(bsat_toq_t* toq, bsat_timeout_t* item);


/** ### bsat_timeout_is_active
 *
 * Returns 1 if the timeout is active; 0 otherwise.
 *
 * :warning: **If you check the timeout state from _inside your registered
 * callback_ this function will always return `0`** (timeouts have been
 * descheduled at the time of callback invocation!).
 *
 * > **NOTE**: You usually _don't need to worry about this_; it's completely
 * > safe to stop a stopped timeout or start a started timeout — both operations
 * > are no-ops.
 */
int bsat_timeout_is_active(bsat_timeout_t* item);


#ifdef __cpluplus
}
#endif /* __cplusplus */


#endif /* BSAT_H */
